<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Library Management System</title>
</head>

<body>
    <h1>Welcome to the Library Management System</h1>
    <p>This is the homepage rendered with EJS.</p>

    <div style="display: block;">
        <a href="/login">Login</a>
        <a href="/register">Register</a>
        <a href="/user">User</a>
        <a href="/books">Books</a>
    </div>

    <div>
        <div>
            <h2>Register</h2>
            <form id="registerForm" style="display: flex; flex-direction: column; width: 400px;">
                <label for="name">Name:</label>
                <input type="text" id="name" required>
                <label for="email">Email:</label>
                <input type="email" id="registerEmail" required>
                <label for="password">Password:</label>
                <input type="password" id="registerPassword" required>
                <br>
                <button type="submit">Register</button>
            </form>
        </div>

        <div>
            <h2>Login</h2>
            <form id="loginForm" style="display: flex; flex-direction: column; width: 400px;">
                <label for="email">Email:</label>
                <input type="email" id="loginEmail" required>
                <label for="password">Password:</label>
                <input type="password" id="loginPassword" required>
                <br>
                <button type="submit">Login</button>
            </form>
        </div>

        <div>
            <h2>Books</h2>
            <form id="booksForm" style="display: flex; flex-direction: column; width: 400px;">
                <label for="title">Title:</label>
                <input type="text" id="title" required>

                <label for="author_name">Author Name:</label>
                <input type="text" id="author_name" required>

                <label for="published_date">Published Date:</label>
                <input type="date" id="published_date" required>
                <br>

                <button type="submit">Create Book</button>
            </form>
        </div>

        <div>
            <h2>Authors</h2>
            <form id="authorsForm" style="display: flex; flex-direction: column; width: 400px;">
                <label for="name">Name:</label>
                <input type="text" id="authorName" required>
                <br>
                <button type="submit">Create Author</button>
            </form>
        </div>

    </div>

    <h1>All Users</h1>
    <button id="fetchAllUsers">Fetch All Users</button>
    <div id="userList"></div>

    <h1>Books</h1>
    <button id="fetchBooks">Fetch All Books</button>
    <div id="bookList"></div>

    <h2>Authors</h2>
    <ul id="authorList"></ul>

    <script>
        // Function to validate email format
        function isValidEmail(email) {
            const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            return emailPattern.test(email);
        }

        document.getElementById("registerForm").addEventListener("submit", async (event) => {
            event.preventDefault();

            const name = document.getElementById("name").value;
            const email = document.getElementById("registerEmail").value;
            const password = document.getElementById("registerPassword").value;

            // Validate email format
            if (!isValidEmail(email)) {
                alert('Invalid email format');
                return;
            }

            try {
                const response = await fetch("http://localhost:8383/user/create", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ name, email, password })
                });

                const data = await response.json();
                if (response.ok) {
                    alert('Registration successful!');
                } else {
                    alert(`Error registering user: ${data.message}`);
                }
            } catch (error) {
                alert('Request failed, check console for details.');
            }
        });

        document.getElementById('loginForm').addEventListener('submit', async (event) => {
            event.preventDefault(); // Prevent form from refreshing the page

            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;

            // Validate email format
            if (!isValidEmail(email)) {
                alert('Invalid email format');
                return;
            }

            try {
                const response = await fetch('http://localhost:8383/user/login', {
                    method: 'POST', // Specify POST method
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ email, password })
                });

                const data = await response.json();
                if (response.ok) {
                    alert('Login successful!');
                } else {
                    alert(`Error logging in: ${data.message}`);
                }
            } catch (error) {
                alert('Request failed, check console for details.');
            }
        });

        document.getElementById('fetchAllUsers').addEventListener('click', async () => {
            try {
                const response = await fetch('http://localhost:8383/user/all');
                if (response.ok) {
                    const users = await response.json();
                    const userList = document.getElementById('userList');
                    userList.innerHTML = ''; // Clear existing content
                    users.forEach(user => {
                        userList.innerHTML += `
                            <div>
                                <p>Name: ${user.name}</p>
                                <p>Email: ${user.email}</p>
                                <p>Role: ${user.role}</p>
                            </div>
                            <hr>
                        `;
                    });
                } else {
                    document.getElementById('userList').innerHTML = 'Error fetching users';
                }
            } catch (error) {
                document.getElementById('userList').innerHTML = 'Request failed';
            }
        });

        document.getElementById('booksForm').addEventListener('submit', async (event) => {
            event.preventDefault(); // Prevent form from refreshing the page

            const title = document.getElementById('title').value;
            const author_name = document.getElementById('author_name').value;
            const published_date = document.getElementById('published_date').value;

            try {
                const response = await fetch('http://localhost:8383/book/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        title,
                        author_name, // Use author_name
                        published_date,
                    }),
                });

                const data = await response.json();
                if (response.ok) {
                    console.log('Book created:', data);
                    alert('Book created successfully!');
                } else {
                    console.error('Error creating book:', response.status, data.message);
                    alert(`Error creating book: ${data.message}`);
                }
            } catch (error) {
                console.error('Request failed:', error);
                alert('Request failed, check the console for details.');
            }
        });

        document.getElementById('fetchBooks').addEventListener('click', async () => {
            try {
                const response = await fetch('http://localhost:8383/book/all');
                if (response.ok) {
                    const books = await response.json();
                    const bookList = document.getElementById('bookList');
                    bookList.innerHTML = ''; // Clear existing content
                    books.forEach(book => {
                        bookList.innerHTML += `
                    <div>
                        <p>Title: ${book.title}</p>
                        <p>Author Name: ${book.author_name}</p> <!-- Update to show author_name -->
                        <p>Published Date: ${book.published_date}</p>
                    </div>
                    <hr>
                `;
                    });
                } else {
                    console.error('Error fetching books:', response.status);
                    document.getElementById('bookList').innerHTML = 'Error fetching books';
                }
            } catch (error) {
                console.error('Request failed:', error);
                document.getElementById('bookList').innerHTML = 'Request failed';
            }
        });



        document.getElementById('authorsForm').addEventListener('submit', async (event) => {
            event.preventDefault(); // Prevent form from refreshing the page
            const name = document.getElementById('authorName').value;
            const response = await fetch('http://localhost:8383/author/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name }),
            });
            const data = await response.json();
            if (response.ok) {
                alert('Author created successfully!');
            } else {
                alert(`Error creating author: ${data.message}`);
            }
        });

        // Fix: Use document.getElementById
        window.addEventListener('DOMContentLoaded', async () => {
            const authorList = document.getElementById('authorList');
            authorList.innerHTML = 'Loading...';

            try {
                const response = await fetch('http://localhost:8383/author/all');
                const authors = await response.json();
                console.log('API Response:', authors); // Log the response here

                authorList.innerHTML = ''; // Clear the loading text

                authors.forEach(author => {
                    authorList.innerHTML += `
                        <li> ${author.name}</li>
                    `;
                });
            } catch (error) {
                authorList.innerHTML = 'Error fetching authors';
            }
        });

    </script>

</body>

</html>